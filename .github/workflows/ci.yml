name: CI


on:
  push:
    branches: [master, dev]


permissions:
  contents: write


jobs:
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
    
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build
      shell: bash
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=$(pwd)/install-dir -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -G "NMake Makefiles" ..
          nmake install

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Windows
        path: build/install-dir/


  linux-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
    
    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=$(pwd)/install-dir -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
          make install -j $(nproc)

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Linux
        path: build/install-dir/
        
  
  linux-aarch64-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:aarch64
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
    
    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=$(pwd)/install-dir -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
          make install -j $(nproc)

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}_LinuxARM
        path: build/install-dir/


  windows-tests:
    runs-on: windows-latest
    needs: windows-build
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
  
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with: 
        name: ${{ matrix.configuration }}_Windows
        path: BaseTCPServer

    - name: Build
      working-directory: ${{ github.workspace }}/Tests
      run: |
          pip install -r requirements.txt
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -G "NMake Makefiles" ..
          nmake install

    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      run: python tests.py


  linux-tests:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    needs: linux-build
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
  
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with: 
        name: ${{ matrix.configuration }}_Linux
        path: BaseTCPServer

    - name: Build
      working-directory: ${{ github.workspace }}/Tests
      run: |
          pip3 install -r requirements.txt
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make install -j $(nproc)

    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      run: python3 tests.py


  linux-aarch64-tests:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:aarch64
    needs: linux-aarch64-build
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
  
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with: 
        name: ${{ matrix.configuration }}_LinuxARM
        path: BaseTCPServer

    - name: Install Python
      run: sudo apt update && sudo apt install -y python3 python3-pip python3-venv

    - name: Build
      working-directory: ${{ github.workspace }}/Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make install -j $(nproc)

    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      run: | 
          export ADDITIONAL_ARGUMENT=qemu-aarch64
          python3 -m venv .venv
          ./.venv/bin/activate
          pip3 install -r requirements.txt
          python3 tests.py


  memory-leak-tests:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    needs: linux-build
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
  
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with: 
        name: ${{ matrix.configuration }}_Linux
        path: BaseTCPServer

    - name: Build
      working-directory: ${{ github.workspace }}/Tests
      run: |
          pip3 install -r requirements.txt
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make install -j $(nproc)

    - name: Memory leak test
      uses: LazyPanda07/check-memory-leaks@v1.3
      with:
        path: Tests/
        name: python3 tests.py
        pre-execute: ln -s $(which python3) python3


  publish:
    runs-on: ubuntu-latest
    needs: [windows-tests, linux-tests, linux-aarch64-tests, memory-leak-tests]

    steps:
    - uses: actions/checkout@v4
  
    - uses: LazyPanda07/extract-current-branch@master
    
    - name: Setup release version variable
      shell: pwsh
      run: echo "VERSION=$($($($(Select-String -Path .\src\BaseTCPServer.cpp -Pattern version) -split '( = )')[3].TrimEnd(';')).Trim('\"'))" >> $Env:GITHUB_ENV

    - name: Download artifacts
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: actions/download-artifact@v4
      
    - name: Setup Windows build list
      run: echo "WINDOWS_BUILD_LIST="$(ls | grep Windows)"" >> ${GITHUB_ENV}
      
    - name: Create Windows zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip -r windows.zip ${{ env.WINDOWS_BUILD_LIST }}

    - name: Create Linux zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip -r linux.zip Release_Linux ReleaseDLL_Linux

    - name: Create Linux ARM zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip -r linux.zip Release_LinuxARM ReleaseDLL_LinuxARM

    - name: Publish
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: gh release create v${{ env.VERSION }} *.zip --title v${{ env.VERSION }} --generate-notes
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
